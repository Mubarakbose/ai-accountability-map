"""Initial migration

Revision ID: ac788dca7c10
Revises: 
Create Date: 2025-07-02 03:06:04.881661

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ac788dca7c10'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('data_collection_methods')
    op.drop_table('data_collection_details')
    op.add_column('pipeline_details', sa.Column('file_path', sa.String(), nullable=True))
    op.add_column('pipeline_details', sa.Column('timestamp', sa.DateTime(), nullable=True))
    op.alter_column('pipeline_details', 'method_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('pipeline_details', 'value',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.add_column('pipeline_methods', sa.Column('responsible_actor_id', sa.String(), nullable=True))
    op.alter_column('pipeline_methods', 'stage_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_foreign_key(None, 'pipeline_methods', 'responsible_actors', ['responsible_actor_id'], ['id'])
    op.add_column('responsible_actors', sa.Column('detail_id', sa.String(), nullable=True))
    op.add_column('responsible_actors', sa.Column('role', sa.String(), nullable=False))
    op.add_column('responsible_actors', sa.Column('contributions', sa.String(), nullable=True))
    op.add_column('responsible_actors', sa.Column('decisions', sa.String(), nullable=True))
    op.add_column('responsible_actors', sa.Column('reasons', sa.String(), nullable=True))
    op.add_column('responsible_actors', sa.Column('timestamp', sa.DateTime(), nullable=True))
    op.alter_column('responsible_actors', 'id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('responsible_actors', 'method_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               nullable=True)
    op.drop_constraint(op.f('responsible_actors_method_id_fkey'), 'responsible_actors', type_='foreignkey')
    op.create_foreign_key(None, 'responsible_actors', 'pipeline_methods', ['method_id'], ['id'])
    op.create_foreign_key(None, 'responsible_actors', 'pipeline_details', ['detail_id'], ['id'])
    op.drop_column('responsible_actors', 'datetime')
    op.drop_column('responsible_actors', 'reason')
    op.drop_column('responsible_actors', 'comments')
    op.drop_column('responsible_actors', 'task')
    op.drop_column('responsible_actors', 'decision')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('responsible_actors', sa.Column('decision', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('responsible_actors', sa.Column('task', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('responsible_actors', sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('responsible_actors', sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('responsible_actors', sa.Column('datetime', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'responsible_actors', type_='foreignkey')
    op.drop_constraint(None, 'responsible_actors', type_='foreignkey')
    op.create_foreign_key(op.f('responsible_actors_method_id_fkey'), 'responsible_actors', 'data_collection_methods', ['method_id'], ['id'])
    op.alter_column('responsible_actors', 'method_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('responsible_actors', 'id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_column('responsible_actors', 'timestamp')
    op.drop_column('responsible_actors', 'reasons')
    op.drop_column('responsible_actors', 'decisions')
    op.drop_column('responsible_actors', 'contributions')
    op.drop_column('responsible_actors', 'role')
    op.drop_column('responsible_actors', 'detail_id')
    op.drop_constraint(None, 'pipeline_methods', type_='foreignkey')
    op.alter_column('pipeline_methods', 'stage_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('pipeline_methods', 'responsible_actor_id')
    op.alter_column('pipeline_details', 'value',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('pipeline_details', 'method_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('pipeline_details', 'timestamp')
    op.drop_column('pipeline_details', 'file_path')
    op.create_table('data_collection_details',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('method_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('field_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('value', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['method_id'], ['data_collection_methods.id'], name=op.f('data_collection_details_method_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('data_collection_details_pkey'))
    )
    op.create_table('data_collection_methods',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stage', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('data_collection_methods_pkey'))
    )
    # ### end Alembic commands ###
